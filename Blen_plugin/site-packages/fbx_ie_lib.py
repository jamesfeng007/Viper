'''
Created on

@author: James
'''

import ctypes
import os.path

dll_name = "FBXUtil.dll"
dllabspath = os.path.dirname(os.path.abspath(__file__)) + os.path.sep + dll_name
lib = ctypes.cdll.LoadLibrary(dllabspath)

ChannelType = {
    'T_X':0,
    'T_Y':1,
    'T_Z':2,
    'R_X':3,
    'R_Y':4,
    'R_Z':5,
    'S_X':6,
    'S_Y':7,
    'S_Z':8,
}

class IntVector2(ctypes.Structure):
    def __init__(self, vx, vy):
        self.x = vx
        self.y = vy
        
    _fields_ = [
        ("x", ctypes.c_int),
        ("y", ctypes.c_int)]
    
class UInt64Vector2(ctypes.Structure):
    def __init__(self, vx, vy):
        self.x = vx
        self.y = vy
        
    _fields_ = [
        ("x", ctypes.c_ulonglong),
        ("y", ctypes.c_ulonglong)]    

class Vector3(ctypes.Structure):   
    def __init__(self, vx, vy, vz):
        self.x = vx
        self.y = vy
        self.z = vz
        
    _fields_ = [
        ("x", ctypes.c_double),
        ("y", ctypes.c_double),
        ("z", ctypes.c_double)]
    
class Vector4(ctypes.Structure):
    def __init__(self, vx, vy, vz, vw):
        self.x = vx
        self.y = vy
        self.z = vz
        self.w = vw
        
    _fields_ = [
        ("x", ctypes.c_double),
        ("y", ctypes.c_double),
        ("z", ctypes.c_double),
        ("w", ctypes.c_double)]    
    
class Mat4x4(ctypes.Structure):
    def __init__(self, x0, x1, x2, x3, y0, y1, y2, y3, z0, z1, z2, z3, w0, w1, w2, w3):
        self.x0 = x0
        self.x1 = x1
        self.x2 = x2
        self.x3 = x3
        self.y0 = y0
        self.y1 = y1
        self.y2 = y2
        self.y3 = y3
        self.z0 = z0
        self.z1 = z1
        self.z2 = z2
        self.z3 = z3
        self.w0 = w0
        self.w1 = w1
        self.w2 = w2
        self.w3 = w3
        
    _fields_ = [
        ("x0", ctypes.c_double), ("x1", ctypes.c_double), ("x2", ctypes.c_double), ("x3", ctypes.c_double),
        ("y0", ctypes.c_double), ("y1", ctypes.c_double), ("y2", ctypes.c_double), ("y3", ctypes.c_double),
        ("z0", ctypes.c_double), ("z1", ctypes.c_double), ("z2", ctypes.c_double), ("z3", ctypes.c_double),
        ("w0", ctypes.c_double), ("w1", ctypes.c_double), ("w2", ctypes.c_double), ("w3", ctypes.c_double)]
    
class GlobalSettings(ctypes.Structure):
    def __init__(self):
        self.UnitScaleFactor = 0.0
        self.OriginalUnitScaleFactor = 0.0
        self.CustomFrameRate = 0.0
        self.TimeMode = 0
        self.AxisUp = b"X" #(ctypes.c_char * 3)()
        self.AxisForward = b"X" #(ctypes.c_char * 3)()
    
    _fields_ = [
        ("UnitScaleFactor", ctypes.c_double),
        ("OriginalUnitScaleFactor", ctypes.c_double),
        ("CustomFrameRate", ctypes.c_double),
        ("TimeMode", ctypes.c_int),
        ("AxisUp", ctypes.c_char * 3),
        ("AxisForward", ctypes.c_char * 3)]
    
class LayerElementInfo(ctypes.Structure):
    def __init__(self):
        self.MappingType = b"X" #(ctypes.c_char * 32)()
        self.RefType = b"X" #(ctypes.c_char * 32)()
    
    _fields_ = [
        ("MappingType", ctypes.c_char * 32),
        ("RefType", ctypes.c_char * 32)]
    
class MatProps(ctypes.Structure):
    def __init__(self):
        self.BumpFactor = 0.0 
    
    _fields_ = [
        ("BumpFactor", ctypes.c_double)]        
    
class ObjectTransformProp(ctypes.Structure):
    def __init__(self):
        self.lclTranslation = Vector3(0.0, 0.0, 0.0)
        self.lclRotation = Vector3(0.0, 0.0, 0.0)
        self.lclScaling = Vector3(0.0, 0.0, 0.0)
        self.GeometricTranslation = Vector3(0.0, 0.0, 0.0)
        self.GeometricRotation = Vector3(0.0, 0.0, 0.0)
        self.GeometricScaling = Vector3(0.0, 0.0, 0.0)
        self.RotationOffset = Vector3(0.0, 0.0, 0.0)
        self.RotationPivot = Vector3(0.0, 0.0, 0.0)
        self.ScalingOffset = Vector3(0.0, 0.0, 0.0)
        self.ScalingPivot = Vector3(0.0, 0.0, 0.0)
        self.PreRotation = Vector3(0.0, 0.0, 0.0)
        self.PostRotation = Vector3(0.0, 0.0, 0.0)
        self.RotationOrder = 0
        self.RotationActive = False
    
    _fields_ = [
        ("lclTranslation", Vector3),
        ("lclRotation", Vector3),
        ("lclScaling", Vector3),
        ("GeometricTranslation", Vector3),
        ("GeometricRotation", Vector3),
        ("GeometricScaling", Vector3),
        ("RotationOffset", Vector3),
        ("RotationPivot", Vector3),
        ("ScalingOffset", Vector3),
        ("ScalingPivot", Vector3),
        ("PreRotation", Vector3),
        ("PostRotation", Vector3),
        ("RotationOrder", ctypes.c_int),
        ("RotationActive", ctypes.c_bool)]        

class FBXExport(object):
    def __init__(self):
        lib.Exporter_New.argtypes = []
        lib.Exporter_New.restype = ctypes.c_void_p
        
        lib.Exporter_AddVertex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_double, ctypes.c_double, ctypes.c_double]
        lib.Exporter_AddVertex.restype = ctypes.c_void_p
        
        lib.Exporter_AddNormal.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_double, ctypes.c_double, ctypes.c_double]
        lib.Exporter_AddNormal.restype = ctypes.c_void_p
        
        lib.Exporter_AddUV.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_double, ctypes.c_double]
        lib.Exporter_AddUV.restype = ctypes.c_void_p
        
        lib.Exporter_AddIndex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_AddIndex.restype = ctypes.c_void_p
        
        lib.Exporter_AddMeshEdge.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_int]
        lib.Exporter_AddMeshEdge.restype = ctypes.c_void_p        
        
        lib.Exporter_AddMatIndex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_AddMatIndex.restype = ctypes.c_void_p
        
        lib.Exporter_AddTangent.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3)]
        lib.Exporter_AddTangent.restype = ctypes.c_void_p
        
        lib.Exporter_AddBinormal.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3)]
        lib.Exporter_AddBinormal.restype = ctypes.c_void_p
        
        lib.Exporter_SetTangentName.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Exporter_SetTangentName.restype = ctypes.c_void_p
        
        lib.Exporter_SetBinormalName.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Exporter_SetBinormalName.restype = ctypes.c_void_p        
        
        lib.Exporter_AddUVIndex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_int]
        lib.Exporter_AddUVIndex.restype = ctypes.c_void_p        
        
        lib.Exporter_AddLoopStart.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_AddLoopStart.restype = ctypes.c_void_p
        
        lib.Exporter_AddSmoothing.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_AddSmoothing.restype = ctypes.c_void_p
        
        lib.Exporter_SetSmoothMode.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_SetSmoothMode.restype = ctypes.c_void_p
        
        lib.Exporter_SetMeshProperty.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3)]
        lib.Exporter_SetMeshProperty.restype = ctypes.c_void_p
        
        lib.Exporter_AddBone.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3)]
        lib.Exporter_AddBone.restype = ctypes.c_void_p
        
        lib.Exporter_AddMaterial.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3)]
        lib.Exporter_AddMaterial.restype = ctypes.c_void_p
        
        lib.Exporter_AddTexture.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_bool, ctypes.c_int, ctypes.c_char_p, 
                                       ctypes.c_int, ctypes.c_int, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.c_bool, ctypes.c_bool]
        lib.Exporter_AddTexture.restype = ctypes.c_void_p
        
        lib.Exporter_SetTextureMatProp.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Exporter_SetTextureMatProp.restype = ctypes.c_void_p        
        
        lib.Exporter_AddPoseNode.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Mat4x4)]
        lib.Exporter_AddPoseNode.restype = ctypes.c_void_p
        
        lib.Exporter_AddBoneChild.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Exporter_AddBoneChild.restype = ctypes.c_void_p
        
        lib.Exporter_AddSubDeformerIndex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int]
        lib.Exporter_AddSubDeformerIndex.restype = ctypes.c_void_p
        
        lib.Exporter_AddSubDeformerWeight.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_double]
        lib.Exporter_AddSubDeformerWeight.restype = ctypes.c_void_p
        
        lib.Exporter_SetSubDeformerTransform.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(Mat4x4), ctypes.POINTER(Vector4)]
        lib.Exporter_SetSubDeformerTransform.restype = ctypes.c_void_p
        
        lib.Exporter_SetSubDeformerTransformLink.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(Mat4x4)]
        lib.Exporter_SetSubDeformerTransformLink.restype = ctypes.c_void_p
        
        lib.Exporter_SetChannelDefaultValue.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_double]
        lib.Exporter_SetChannelDefaultValue.restype = ctypes.c_void_p
        
        lib.Exporter_AddChannelKey.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_double, ctypes.c_double]
        lib.Exporter_AddChannelKey.restype = ctypes.c_void_p
        
        lib.Exporter_SetTimeSpan.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]
        lib.Exporter_SetTimeSpan.restype = ctypes.c_void_p
        
        lib.Exporter_SetFPS.argtypes = [ctypes.c_void_p, ctypes.c_double]
        lib.Exporter_SetFPS.restype = ctypes.c_void_p        
        
        lib.Exporter_CreateUVInfo.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_char_p]
        lib.Exporter_CreateUVInfo.restype = ctypes.c_void_p
        
        lib.Exporter_Export.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        lib.Exporter_Export.restype = ctypes.c_bool
        
        lib.Exporter_PrintMesh.argtypes = [ctypes.c_void_p]
        lib.Exporter_PrintMesh.restype = ctypes.c_void_p
        
        lib.Exporter_PrintSkeleton.argtypes = [ctypes.c_void_p]
        lib.Exporter_PrintSkeleton.restype = ctypes.c_void_p
        
        lib.Exporter_PrintTakes.argtypes = [ctypes.c_void_p]
        lib.Exporter_PrintTakes.restype = ctypes.c_void_p
        
        lib.Exporter_SetAsASCII.argtypes = [ctypes.c_void_p, ctypes.c_bool]
        lib.Exporter_SetAsASCII.restype = ctypes.c_void_p        

        self.obj = lib.Exporter_New()
    
    def add_vertex(self, name, px, py, pz):
        lib.Exporter_AddVertex(self.obj, name, px, py, pz)
        
    def create_uv_info(self, mname, index, name):
        lib.Exporter_CreateUVInfo(self.obj, mname, index, name)
        
    def add_uv(self, name, uvIndex, x, y):
        lib.Exporter_AddUV(self.obj, name, uvIndex, x, y)
        
    def add_uv_index(self, name, uvIndex, index):
        lib.Exporter_AddUVIndex(self.obj, name, uvIndex, index)        
        
    def add_normal(self, name, nx, ny, nz):
        lib.Exporter_AddNormal(self.obj, name, nx, ny, nz)
        
    def add_index(self, name, index):
        lib.Exporter_AddIndex(self.obj, name, index)
        
    def add_mesh_edge(self, name, sindex, eindex):
        lib.Exporter_AddMeshEdge(self.obj, name, sindex, eindex)        
        
    def add_mat_index(self, name, index):
        lib.Exporter_AddMatIndex(self.obj, name, index)
        
    def add_tangent(self, name, tan):
        lib.Exporter_AddTangent(self.obj, name, tan)
        
    def add_binormal(self, name, bino):
        lib.Exporter_AddBinormal(self.obj, name, bino)
        
    def set_binormal_name(self, name, bino):
        lib.Exporter_SetBinormalName(self.obj, name, bino)
        
    def set_tangent_name(self, name, tan):
        lib.Exporter_SetTangentName(self.obj, name, tan)
        
    def add_smoothing(self, name, index):
        lib.Exporter_AddSmoothing(self.obj, name, index)
        
    def set_smoothing_mode(self, name, index):
        lib.Exporter_SetSmoothMode(self.obj, name, index)
        
    def add_loop_start(self, name, start):
        lib.Exporter_AddLoopStart(self.obj, name, start)
        
    def set_mesh_property(self, name, trans, rot, scale):
        lib.Exporter_SetMeshProperty(self.obj, name, trans, rot, scale)
        
    def add_material(self, mname, sname, diffuse, ambient, emissive):
        lib.Exporter_AddMaterial(self.obj, mname, sname, diffuse, ambient, emissive)
        
    def add_texture(self, name, fileName, relFileName, alphaSource, premultiplyAlpha, currentMappingType, UVSet, 
                    wrapModeU, wrapModeV, translation, scaling, useMaterial, useMipMap):
        lib.Exporter_AddTexture(self.obj, name, fileName, relFileName, alphaSource, premultiplyAlpha, currentMappingType, UVSet, 
                           wrapModeU, wrapModeV, translation, scaling, useMaterial, useMipMap)
        
    def set_texture_mat_prop(self, name, matName, matProp):
        lib.Exporter_SetTextureMatProp(self.obj, name, matName, matProp)        
        
    def add_pose_node(self, name, mat):
        lib.Exporter_AddPoseNode(self.obj, name, mat)
        
    def add_sub_deformer_index(self, mname, bname, index):
        lib.Exporter_AddSubDeformerIndex(self.obj, mname, bname, index)
        
    def add_sub_deformer_weight(self, mname, bname, weight):
        lib.Exporter_AddSubDeformerWeight(self.obj, mname, bname, weight)
        
    def set_sub_deformer_transform(self, mname, bname, transf, quat):
        lib.Exporter_SetSubDeformerTransform(self.obj, mname, bname, transf, quat)
        
    def set_sub_deformer_transform_link(self, mname, bname, transfLink):
        lib.Exporter_SetSubDeformerTransformLink(self.obj, mname, bname, transfLink)
        
    def set_channel_default_value(self, tname, mname, type, value):
        lib.Exporter_SetChannelDefaultValue(self.obj, tname, mname, type, value)
        
    def add_channel_key(self, tname, mname, type, frame, value):
        lib.Exporter_AddChannelKey(self.obj, tname, mname, type, frame, value)
        
    def set_time_span(self, tname, lstart, lend, rstart, rend):
        lib.Exporter_SetTimeSpan(self.obj, tname, lstart, lend, rstart, rend)
        
    def set_fps(self, fps):
        lib.Exporter_SetFPS(self.obj, fps)        
        
    def add_bone_child(self, cname, pname):
        lib.Exporter_AddBoneChild(self.obj, cname, pname)        
        
    def add_bone(self, name, translation, rotation, scaling):
        lib.Exporter_AddBone(self.obj, name, translation, rotation, scaling)
        
    def fbx_export(self, filename):
        lib.Exporter_Export(self.obj, filename)
        
    def print_mesh(self):
        lib.Exporter_PrintMesh(self.obj)
        
    def print_skeleton(self):
        lib.Exporter_PrintSkeleton(self.obj)
        
    def print_takes(self):
        lib.Exporter_PrintTakes(self.obj)
        
    def set_as_ascii(self, asAscii):
        lib.Exporter_SetAsASCII(self.obj, asAscii)
        
class FBXImport(object):
    def __init__(self):
        lib.Importer_New.argtypes = []
        lib.Importer_New.restype = ctypes.c_void_p
        
        lib.Importer_Import.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        lib.Importer_Import.restype = ctypes.c_bool
        
        lib.Importer_GetGlobalSettings.argtypes = [ctypes.c_void_p, ctypes.POINTER(GlobalSettings)]
        lib.Importer_GetGlobalSettings.restype = ctypes.c_void_p
        
        lib.Importer_GetConnectionCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetConnectionCount.restype = ctypes.c_int
        
        lib.Importer_GetConnections.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetConnections.restype = ctypes.c_bool        
        
        lib.Importer_GetModelTransformProp.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(ObjectTransformProp)]
        lib.Importer_GetModelTransformProp.restype = ctypes.c_bool
        
        lib.Importer_GetModelCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetModelCount.restype = ctypes.c_int
        
        lib.Importer_GetModelUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetModelUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetModelName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetModelName.restype = ctypes.c_char_p
        
        lib.Importer_GetModelAttributeName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetModelAttributeName.restype = ctypes.c_char_p        
        
        lib.Importer_IsModelBone.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_IsModelBone.restype = ctypes.c_bool
        
        lib.Importer_GetMeshVerticeSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshVerticeSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshIndiceSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshIndiceSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshNormalSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshNormalSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshEdgeSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshEdgeSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshSmoothingSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshSmoothingSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshUVInfoSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshUVInfoSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshUVIndiceSize.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]
        lib.Importer_GetMeshUVIndiceSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshUVVerticeSize.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]
        lib.Importer_GetMeshUVVerticeSize.restype = ctypes.c_int
        
        lib.Importer_GetMeshMatIndiceSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshMatIndiceSize.restype = ctypes.c_int        
        
        lib.Importer_GetMeshCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetMeshCount.restype = ctypes.c_int
        
        lib.Importer_GetMeshName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshName.restype = ctypes.c_char_p
        
        lib.Importer_GetMeshUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMeshUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetUVInfoName.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.POINTER(LayerElementInfo)]
        lib.Importer_GetUVInfoName.restype = ctypes.c_char_p        
        
        lib.Importer_GetMeshVertice.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetMeshVertice.restype = ctypes.c_bool
        
        lib.Importer_GetMeshNormals.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(LayerElementInfo)]
        lib.Importer_GetMeshNormals.restype = ctypes.c_bool
        
        lib.Importer_GetMeshSmoothings.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(LayerElementInfo)]
        lib.Importer_GetMeshSmoothings.restype = ctypes.c_bool
        
        lib.Importer_GetMeshMaterialInfo.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(LayerElementInfo)]
        lib.Importer_GetMeshMaterialInfo.restype = ctypes.c_bool        
        
        lib.Importer_GetMeshIndice.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetMeshIndice.restype = ctypes.c_bool
        
        lib.Importer_GetMeshUVIndice.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetMeshUVIndice.restype = ctypes.c_bool
        
        lib.Importer_GetMeshUVVertice.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetMeshUVVertice.restype = ctypes.c_bool        
        
        lib.Importer_GetMeshEdges.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetMeshEdges.restype = ctypes.c_bool
        
        lib.Importer_GetMaterialCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetMaterialCount.restype = ctypes.c_int
        
        lib.Importer_GetMaterialName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMaterialName.restype = ctypes.c_char_p
        
        lib.Importer_GetMaterialUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetMaterialUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetMaterialProps.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(Vector3), 
                                                                                ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(MatProps)]
        lib.Importer_GetMaterialProps.restype = ctypes.c_bool
        
        lib.Importer_GetTextureCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetTextureCount.restype = ctypes.c_int
        
        lib.Importer_GetTextureName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetTextureName.restype = ctypes.c_char_p
        
        lib.Importer_GetTextureUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetTextureUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetTextureRelFileName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetTextureRelFileName.restype = ctypes.c_char_p
        
        lib.Importer_GetTextureFileName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetTextureFileName.restype = ctypes.c_char_p
        
        lib.Importer_GetTextureMatProp.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetTextureMatProp.restype = ctypes.c_char_p
        
        lib.Importer_GetTextureMapping.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(IntVector2)]
        lib.Importer_GetTextureMapping.restype = ctypes.c_char_p
        
        lib.Importer_GetBoneCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetBoneCount.restype = ctypes.c_int
        
        lib.Importer_GetBoneUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetBoneUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetBoneName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetBoneName.restype = ctypes.c_char_p
        
        lib.Importer_GetPoseCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetPoseCount.restype = ctypes.c_int
        
        lib.Importer_GetRefBoneUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetRefBoneUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetPoseMatrix.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetPoseMatrix.restype = ctypes.c_bool
        
        lib.Importer_GetClusterCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetClusterCount.restype = ctypes.c_int
        
        lib.Importer_GetClusterUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetClusterUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetClusterName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetClusterName.restype = ctypes.c_char_p
        
        lib.Importer_GetClusterIndiceSize.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetClusterIndiceSize.restype = ctypes.c_int
        
        lib.Importer_GetClusterWeightIndice.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_long]
        lib.Importer_GetClusterWeightIndice.restype = ctypes.c_bool
        
        lib.Importer_GetClusterTransforms.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetClusterTransforms.restype = ctypes.c_bool
        
        lib.Importer_GetSkinCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetSkinCount.restype = ctypes.c_int
        
        lib.Importer_GetSkinUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetSkinUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetSkinName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetSkinName.restype = ctypes.c_char_p
        
        lib.Importer_GetStackCount.argtypes = [ctypes.c_void_p]
        lib.Importer_GetStackCount.restype = ctypes.c_int
        
        lib.Importer_GetStackUUID.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetStackUUID.restype = ctypes.c_ulonglong
        
        lib.Importer_GetAnimChannelDefaultValue.argtypes = [ctypes.c_void_p, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_int]
        lib.Importer_GetAnimChannelDefaultValue.restype = ctypes.c_double
        
        lib.Importer_GetKeyCount.argtypes = [ctypes.c_void_p, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_int]
        lib.Importer_GetKeyCount.restype = ctypes.c_int
        
        lib.Importer_GetKeyTimeValue.argtypes = [ctypes.c_void_p, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_ulonglong, 
                                                                                ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetKeyTimeValue.restype = ctypes.c_bool
        
        lib.Importer_GetStackName.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Importer_GetStackName.restype = ctypes.c_char_p
        
        lib.Importer_GetLayerName.argtypes = [ctypes.c_void_p, ctypes.c_ulonglong]
        lib.Importer_GetLayerName.restype = ctypes.c_char_p
        
        lib.Importer_AnimationExist.argtypes = [ctypes.c_void_p, ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_ulonglong]
        lib.Importer_AnimationExist.restype = ctypes.c_bool
        
        lib.Importer_PrintMesh.argtypes = [ctypes.c_void_p]
        lib.Importer_PrintMesh.restype = ctypes.c_void_p
        
        lib.Importer_PrintNode.argtypes = [ctypes.c_void_p]
        lib.Importer_PrintNode.restype = ctypes.c_void_p
        
        lib.Importer_PrintSkeleton.argtypes = [ctypes.c_void_p]
        lib.Importer_PrintSkeleton.restype = ctypes.c_void_p
        
        lib.Importer_PrintAnimation.argtypes = [ctypes.c_void_p]
        lib.Importer_PrintAnimation.restype = ctypes.c_void_p        
        
        self.obj = lib.Importer_New()
        
    def fbx_import(self, filename):
        lib.Importer_Import(self.obj, filename)
        
    def get_global_settings(self, global_settings):
        lib.Importer_GetGlobalSettings(self.obj, global_settings)
        
    def get_connection_count(self):
        return lib.Importer_GetConnectionCount(self.obj)
    
    def get_connections(self, connections, connection_size):
        return lib.Importer_GetConnections(self.obj, connections, connection_size)    
        
    def get_model_transform_prop(self, index, prop):
        lib.Importer_GetModelTransformProp(self.obj, index, prop)
        
    def get_model_count(self):
        return lib.Importer_GetModelCount(self.obj)
    
    def get_model_uuid(self, index):
        return lib.Importer_GetModelUUID(self.obj, index)
    
    def get_model_name(self, index):
        return lib.Importer_GetModelName(self.obj, index)
    
    def get_model_attribute_name(self, index):
        return lib.Importer_GetModelAttributeName(self.obj, index)    
    
    def is_model_bone(self, index):
        return lib.Importer_IsModelBone(self.obj, index)    
        
    def get_mesh_uuid(self, index):
        return lib.Importer_GetMeshUUID(self.obj, index)
        
    def get_mesh_vertice_size(self, index):
        return lib.Importer_GetMeshVerticeSize(self.obj, index)
    
    def get_mesh_indice_size(self, index):
        return lib.Importer_GetMeshIndiceSize(self.obj, index)
    
    def get_mesh_normal_size(self, index):
        return lib.Importer_GetMeshNormalSize(self.obj, index)
    
    def get_mesh_edge_size(self, index):
        return lib.Importer_GetMeshEdgeSize(self.obj, index)
    
    def get_mesh_smoothing_size(self, index):
        return lib.Importer_GetMeshSmoothingSize(self.obj, index)
    
    def get_mesh_uv_info_size(self, index):
        return lib.Importer_GetMeshUVInfoSize(self.obj, index)
    
    def get_mesh_uv_indice_size(self, index, uv_index):
        return lib.Importer_GetMeshUVIndiceSize(self.obj, index, uv_index)
    
    def get_mesh_uv_vertice_size(self, index, uv_index):
        return lib.Importer_GetMeshUVVerticeSize(self.obj, index, uv_index)
    
    def get_mesh_mat_indice_size(self, index):
        return lib.Importer_GetMeshMatIndiceSize(self.obj, index)    
        
    def get_mesh_count(self):
        return lib.Importer_GetMeshCount(self.obj)
    
    def get_mesh_name(self, index):
        return lib.Importer_GetMeshName(self.obj, index)
    
    def get_uv_info_name(self, index, uv_index, layer_info):
        return lib.Importer_GetUVInfoName(self.obj, index, uv_index, layer_info)
    
    def get_mesh_vertice(self, index, vertice, vertice_size):
        return lib.Importer_GetMeshVertice(self.obj, index, vertice, vertice_size)
    
    def get_mesh_normal(self, index, normal, normal_size, layer_info):
        return lib.Importer_GetMeshNormals(self.obj, index, normal, normal_size, layer_info)
    
    def get_mesh_smoothing(self, index, smoothing, smoothing_size, layer_info):
        return lib.Importer_GetMeshSmoothings(self.obj, index, smoothing, smoothing_size, layer_info)
    
    def get_mesh_material_info(self, index, mat_indice, indice_size, layer_info):
        return lib.Importer_GetMeshMaterialInfo(self.obj, index, mat_indice, indice_size, layer_info)    
    
    def get_mesh_indice(self, index, indices, indices_size):
        return lib.Importer_GetMeshIndice(self.obj, index, indices, indices_size)
    
    def get_mesh_uv_indice(self, index, uv_index, indices, indices_size):
        return lib.Importer_GetMeshUVIndice(self.obj, index, uv_index, indices, indices_size)
    
    def get_mesh_uv_vertice(self, index, uv_index, vertices, vertices_size):
        return lib.Importer_GetMeshUVVertice(self.obj, index, uv_index, vertices, vertices_size)    
    
    def get_mesh_edges(self, index, edges, edge_size):
        return lib.Importer_GetMeshEdges(self.obj, index, edges, edge_size)
    
    def get_material_count(self):
        return lib.Importer_GetMaterialCount(self.obj)
    
    def get_material_uuid(self, index):
        return lib.Importer_GetMaterialUUID(self.obj, index)
    
    def get_material_name(self, index):
        return lib.Importer_GetMaterialName(self.obj, index)
    
    def get_material_props(self, index, emissive, ambient, diffuse, extra):
        return lib.Importer_GetMaterialProps(self.obj, index, emissive, ambient, diffuse, extra)
    
    def get_texture_count(self):
        return lib.Importer_GetTextureCount(self.obj)
    
    def get_texture_uuid(self, index):
        return lib.Importer_GetTextureUUID(self.obj, index)
    
    def get_texture_name(self, index):
        return lib.Importer_GetTextureName(self.obj, index)
    
    def get_texture_rel_filename(self, index):
        return lib.Importer_GetTextureRelFileName(self.obj, index)
    
    def get_texture_filename(self, index):
        return lib.Importer_GetTextureFileName(self.obj, index)
    
    def get_texture_mat_prop(self, index):
        return lib.Importer_GetTextureMatProp(self.obj, index)
    
    def get_texture_mapping(self, index, pT, pR, pS, pW):
        return lib.Importer_GetTextureMapping(self.obj, index, pT, pR, pS, pW)
    
    def get_bone_count(self):
        return lib.Importer_GetBoneCount(self.obj)
    
    def get_bone_uuid(self, index):
        return lib.Importer_GetBoneUUID(self.obj, index)
    
    def get_bone_name(self, index):
        return lib.Importer_GetBoneName(self.obj, index)
    
    def get_pose_count(self):
        return lib.Importer_GetPoseCount(self.obj)
    
    def get_ref_bone_uuid(self, index):
        return lib.Importer_GetRefBoneUUID(self.obj, index)
    
    def get_pose_matrix(self, index, matrix, mat_size):
        return lib.Importer_GetPoseMatrix(self.obj, index, matrix, mat_size)
    
    def get_cluster_count(self):
        return lib.Importer_GetClusterCount(self.obj)
    
    def get_cluster_uuid(self, index):
        return lib.Importer_GetClusterUUID(self.obj, index)
    
    def get_cluster_name(self, index):
        return lib.Importer_GetClusterName(self.obj, index)
    
    def get_cluster_indice_size(self, index):
        return lib.Importer_GetClusterIndiceSize(self.obj, index)
    
    def get_cluster_weight_indice(self, index, indices, weight, indices_size):
        return lib.Importer_GetClusterWeightIndice(self.obj, index, indices, weight, indices_size)
    
    def get_cluster_transforms(self, index, transform, link_transform, mat_size):
        return lib.Importer_GetClusterTransforms(self.obj, index, transform, link_transform, mat_size)
    
    def get_skin_count(self):
        return lib.Importer_GetSkinCount(self.obj)
    
    def get_skin_uuid(self, index):
        return lib.Importer_GetSkinUUID(self.obj, index)
    
    def get_skin_name(self, index):
        return lib.Importer_GetSkinName(self.obj, index)
    
    def get_stack_count(self):
        return lib.Importer_GetStackCount(self.obj)
    
    def get_stack_uuid(self, index):
        return lib.Importer_GetStackUUID(self.obj, index)
    
    def get_anim_channel_default_value(self, stack_uuid, layer_uuid, bone_uuid, channel):
        return lib.Importer_GetAnimChannelDefaultValue(self.obj, stack_uuid, layer_uuid, bone_uuid, channel)
    
    def get_key_count(self, stack_uuid, layer_uuid, bone_uuid, channel):
        return lib.Importer_GetKeyCount(self.obj, stack_uuid, layer_uuid, bone_uuid, channel)
    
    def get_stack_name(self, index):
        return lib.Importer_GetStackName(self.obj, index)
    
    def get_layer_name(self, uuid):
        return lib.Importer_GetLayerName(self.obj, uuid)
    
    def get_key_time_value(self, stack_uuid, layer_uuid, bone_uuid, channel, times, values, key_size):
        return lib.Importer_GetKeyTimeValue(self.obj, stack_uuid, layer_uuid, bone_uuid, channel, times, values, key_size)
    
    def animation_exist(self, stack_uuid, layer_uuid, bone_uuid):
        return lib.Importer_AnimationExist(self.obj, stack_uuid, layer_uuid, bone_uuid)    
    
    def print_mesh(self):
        lib.Importer_PrintMesh(self.obj)
        
    def print_node(self):
        lib.Importer_PrintNode(self.obj)
        
    def print_skeleton(self):
        lib.Importer_PrintSkeleton(self.obj)
        
    def print_animation(self):
        lib.Importer_PrintAnimation(self.obj)        
            
        