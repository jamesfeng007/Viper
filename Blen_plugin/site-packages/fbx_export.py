'''
Created on

@author: James
'''

import ctypes
import os.path

dll_name = "FBXUtil.dll"
dllabspath = os.path.dirname(os.path.abspath(__file__)) + os.path.sep + dll_name
lib = ctypes.cdll.LoadLibrary(dllabspath)

class Vector3(ctypes.Structure):
    def __init__(self, vx, vy, vz):
        self.x = vx
        self.y = vy
        self.z = vz
        
    _fields_ = [
        ("x", ctypes.c_float),
        ("y", ctypes.c_float),
        ("z", ctypes.c_float)]
    
class Vector4(ctypes.Structure):
    def __init__(self, vx, vy, vz, vw):
        self.x = vx
        self.y = vy
        self.z = vz
        self.w = vw
        
    _fields_ = [
        ("x", ctypes.c_float),
        ("y", ctypes.c_float),
        ("z", ctypes.c_float),
        ("w", ctypes.c_float)]    
    
class Mat4x4(ctypes.Structure):
    def __init__(self, x0, x1, x2, x3, y0, y1, y2, y3, z0, z1, z2, z3, w0, w1, w2, w3):
        self.x0 = x0
        self.x1 = x1
        self.x2 = x2
        self.x3 = x3
        self.y0 = y0
        self.y1 = y1
        self.y2 = y2
        self.y3 = y3
        self.z0 = z0
        self.z1 = z1
        self.z2 = z2
        self.z3 = z3
        self.w0 = w0
        self.w1 = w1
        self.w2 = w2
        self.w3 = w3
        
    _fields_ = [
        ("x0", ctypes.c_float), ("x1", ctypes.c_float), ("x2", ctypes.c_float), ("x3", ctypes.c_float),
        ("y0", ctypes.c_float), ("y1", ctypes.c_float), ("y2", ctypes.c_float), ("y3", ctypes.c_float),
        ("z0", ctypes.c_float), ("z1", ctypes.c_float), ("z2", ctypes.c_float), ("z3", ctypes.c_float),
        ("w0", ctypes.c_float), ("w1", ctypes.c_float), ("w2", ctypes.c_float), ("w3", ctypes.c_float)]

class FBXExport(object):
    def __init__(self, val):
        lib.Foo_new.argtypes = [ctypes.c_int]
        lib.Foo_new.restype = ctypes.c_void_p
        
        lib.Foo_AddVertex.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddVertex.restype = ctypes.c_void_p
        
        lib.Foo_AddNormal.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddNormal.restype = ctypes.c_void_p
        
        lib.Foo_AddUV.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddUV.restype = ctypes.c_void_p
        
        lib.Foo_AddIndex.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddIndex.restype = ctypes.c_void_p
        
        lib.Foo_AddMatIndex.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddMatIndex.restype = ctypes.c_void_p
        
        lib.Foo_AddUVIndex.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]
        lib.Foo_AddUVIndex.restype = ctypes.c_void_p        
        
        lib.Foo_AddLoopStart.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddLoopStart.restype = ctypes.c_void_p
        
        lib.Foo_AddSmoothing.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddSmoothing.restype = ctypes.c_void_p
        
        lib.Foo_SetSmoothMode.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_SetSmoothMode.restype = ctypes.c_void_p
        
        lib.Foo_SetMeshProperty.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3)]
        lib.Foo_SetMeshProperty.restype = ctypes.c_void_p
        
        lib.Foo_AddBone.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.POINTER(Vector3), ctypes.POINTER(Vector3), ctypes.POINTER(Vector3)]
        lib.Foo_AddBone.restype = ctypes.c_void_p
        
        lib.Foo_AddMaterial.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Foo_AddMaterial.restype = ctypes.c_void_p
        
        lib.Foo_AddBoneChild.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p]
        lib.Foo_AddBoneChild.restype = ctypes.c_void_p
        
        lib.Foo_AddSubDeformerIndex.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int]
        lib.Foo_AddSubDeformerIndex.restype = ctypes.c_void_p
        
        lib.Foo_AddSubDeformerWeight.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_float]
        lib.Foo_AddSubDeformerWeight.restype = ctypes.c_void_p
        
        lib.Foo_SetSubDeformerTransform.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(Mat4x4), ctypes.POINTER(Vector4)]
        lib.Foo_SetSubDeformerTransform.restype = ctypes.c_void_p
        
        lib.Foo_SetSubDeformerTransformLink.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(Mat4x4)]
        lib.Foo_SetSubDeformerTransformLink.restype = ctypes.c_void_p        
        
        lib.Foo_CreateUVInfo.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p]
        lib.Foo_CreateUVInfo.restype = ctypes.c_void_p
        
        lib.Foo_Export.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        lib.Foo_Export.restype = ctypes.c_bool
        
        lib.Foo_PrintMesh.argtypes = [ctypes.c_void_p]
        lib.Foo_PrintMesh.restype = ctypes.c_void_p
        
        lib.Foo_PrintSkeleton.argtypes = [ctypes.c_void_p]
        lib.Foo_PrintSkeleton.restype = ctypes.c_void_p

        self.obj = lib.Foo_new(val)
    
    def add_vertex(self, px, py, pz):
        lib.Foo_AddVertex(self.obj, px, py, pz)
        
    def create_uv_info(self, index, name):
        lib.Foo_CreateUVInfo(self.obj, index, name)
        
    def add_uv(self, unIndex, x, y):
        lib.Foo_AddUV(self.obj, unIndex, x, y)
        
    def add_uv_index(self, unIndex, index):
        lib.Foo_AddUVIndex(self.obj, unIndex, index)        
        
    def add_normal(self, nx, ny, nz):
        lib.Foo_AddNormal(self.obj, nx, ny, nz)
        
    def add_index(self, index):
        lib.Foo_AddIndex(self.obj, index)
        
    def add_mat_index(self, index):
        lib.Foo_AddMatIndex(self.obj, index)
        
    def add_smoothing(self, index):
        lib.Foo_AddSmoothing(self.obj, index)
        
    def set_smoothing_mode(self, index):
        lib.Foo_SetSmoothMode(self.obj, index)
        
    def add_loop_start(self, start):
        lib.Foo_AddLoopStart(self.obj, start)
        
    def set_mesh_property(self, name, trans, rot, scale):
        lib.Foo_SetMeshProperty(self.obj, name, trans, rot, scale)
        
    def add_material(self, mname, sname):
        lib.Foo_AddMaterial(self.obj, mname, sname)
        
    def add_sub_deformer_index(self, mname, bname, index):
        lib.Foo_AddSubDeformerIndex(self.obj, mname, bname, index)
        
    def add_sub_deformer_weight(self, mname, bname, weight):
        lib.Foo_AddSubDeformerWeight(self.obj, mname, bname, weight)
        
    def set_sub_deformer_transform(self, mname, bname, transf, quat):
        lib.Foo_SetSubDeformerTransform(self.obj, mname, bname, transf, quat)
        
    def set_sub_deformer_transform_link(self, mname, bname, transfLink):
        lib.Foo_SetSubDeformerTransformLink(self.obj, mname, bname, transfLink)
        
    def add_bone_child(self, cname, pname):
        lib.Foo_AddBoneChild(self.obj, cname, pname)        
        
    def add_bone(self, name, translation, rotation, scaling):
        lib.Foo_AddBone(self.obj, name, translation, rotation, scaling)
        
    def export(self, filename):
        lib.Foo_Export(self.obj, filename)
        
    def print_mesh(self):
        lib.Foo_PrintMesh(self.obj)
        
    def print_skeleton(self):
        lib.Foo_PrintSkeleton(self.obj)
        