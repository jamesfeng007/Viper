'''
Created on

@author: James
'''

import ctypes
import os.path

dll_name = "FBXUtil.dll"
dllabspath = os.path.dirname(os.path.abspath(__file__)) + os.path.sep + dll_name
lib = ctypes.cdll.LoadLibrary(dllabspath)

class FBXExport(object):
    def __init__(self, val):
        lib.Foo_new.argtypes = [ctypes.c_int]
        lib.Foo_new.restype = ctypes.c_void_p

        lib.Foo_bar.argtypes = [ctypes.c_void_p]
        lib.Foo_bar.restype = ctypes.c_void_p

        lib.Foo_foobar.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_foobar.restype = ctypes.c_int
        
        lib.Foo_AddVertex.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddVertex.restype = ctypes.c_void_p
        
        lib.Foo_AddNormal.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddNormal.restype = ctypes.c_void_p
        
        lib.Foo_AddUV.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_float, ctypes.c_float]
        lib.Foo_AddUV.restype = ctypes.c_void_p
        
        lib.Foo_AddIndex.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddIndex.restype = ctypes.c_void_p
        
        lib.Foo_AddUVIndex.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]
        lib.Foo_AddUVIndex.restype = ctypes.c_void_p        
        
        lib.Foo_AddLoopStart.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddLoopStart.restype = ctypes.c_void_p
        
        lib.Foo_AddSmoothing.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_AddSmoothing.restype = ctypes.c_void_p
        
        lib.Foo_SetSmoothMode.argtypes = [ctypes.c_void_p, ctypes.c_int]
        lib.Foo_SetSmoothMode.restype = ctypes.c_void_p
        
        lib.Foo_SetMeshName.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        lib.Foo_SetMeshName.restype = ctypes.c_void_p
        
        lib.Foo_CreateUVInfo.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_char_p]
        lib.Foo_CreateUVInfo.restype = ctypes.c_void_p
        
        lib.Foo_Export.argtypes = [ctypes.c_void_p, ctypes.c_char_p]
        lib.Foo_Export.restype = ctypes.c_bool
        
        lib.Foo_Print.argtypes = [ctypes.c_void_p]
        lib.Foo_Print.restype = ctypes.c_void_p        

        self.obj = lib.Foo_new(val)

    def bar(self):
        lib.Foo_bar(self.obj)

    def foobar(self, val):
        return lib.Foo_foobar(self.obj, val)
    
    def add_vertex(self, px, py, pz):
        lib.Foo_AddVertex(self.obj, px, py, pz)
        
    def create_uv_info(self, index, name):
        lib.Foo_CreateUVInfo(self.obj, index, name)
        
    def add_uv(self, unIndex, x, y):
        lib.Foo_AddUV(self.obj, unIndex, x, y)
        
    def add_uv_index(self, unIndex, index):
        lib.Foo_AddUVIndex(self.obj, unIndex, index)        
        
    def add_normal(self, nx, ny, nz):
        lib.Foo_AddNormal(self.obj, nx, ny, nz)
        
    def add_index(self, index):
        lib.Foo_AddIndex(self.obj, index)
        
    def add_smoothing(self, index):
        lib.Foo_AddSmoothing(self.obj, index)
        
    def set_smoothing_mode(self, index):
        lib.Foo_SetSmoothMode(self.obj, index)
        
    def add_loop_start(self, start):
        lib.Foo_AddLoopStart(self.obj, start)
        
    def set_mesh_name(self, name):
        lib.Foo_SetMeshName(self.obj, name)
        
    def export(self, filename):
        lib.Foo_Export(self.obj, filename)
        
    def Print(self):
        lib.Foo_Print(self.obj)
        